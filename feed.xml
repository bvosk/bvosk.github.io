<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">On Ice</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2016-06-09T21:23:32-04:00</updated>
<id>/</id>
<author>
  <name>Brian Voskerijian</name>
  <uri>/</uri>
  <email>brian@bvosk.xyz</email>
</author>


<entry>
  <title type="html"><![CDATA[Nerves Blinky]]></title>
  <link rel="alternate" type="text/html" href="/installing-nerves/" />
  <id>/installing-nerves</id>
  <published>2016-06-09T20:55:15-04:00</published>
  <updated>2016-06-09T20:55:15-04:00</updated>
  <author>
    <name>Brian Voskerijian</name>
    <uri></uri>
    <email>brian@bvosk.xyz</email>
  </author>
  <content type="html">
    &lt;h1 id=&quot;dependencies&quot;&gt;Dependencies&lt;/h1&gt;

&lt;p&gt;We’ll need to grab some dependencies to get started building firmware with Nerves. Every post has to start somewhere, so I’ll assume that (like me) you’re using Ubuntu 14.04 and you’re somewhat familiar with the Linux command line.&lt;/p&gt;

&lt;p&gt;Following along with the &lt;a href=&quot;https://hexdocs.pm/nerves/installation.html&quot;&gt;Nerves installation page&lt;/a&gt;, here are the things we’ll need:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt; - The programming language we’ll be using&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://www.erlang.org/&quot;&gt;Erlang&lt;/a&gt; - The development platform on which Elixir runs&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://hex.pm/&quot;&gt;Hex&lt;/a&gt; - Erlang’s package manager&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/erlang/rebar3&quot;&gt;Rebar&lt;/a&gt; - A tol used to create Erlang applications&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/fhunleth/fwup&quot;&gt;fwup&lt;/a&gt; - A firmware update utility for embedded Linux systems&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://manpages.ubuntu.com/manpages/wily/man1/gstat.1.html&quot;&gt;gstat&lt;/a&gt; - Used in Nerves scripts&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://packages.ubuntu.com/trusty/squashfs-tools&quot;&gt;squashfs-tools&lt;/a&gt; - Used in Nerves scripts&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;install-elixir--erlang&quot;&gt;Install Elixir &amp;amp; Erlang&lt;/h2&gt;

&lt;p&gt;We’ll follow the &lt;a href=&quot;http://elixir-lang.org/install.html&quot;&gt;Elixir installation instructions&lt;/a&gt; to install Erlang and Elixir.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;c&quot;&gt;# Add the Erlang Solutions repository&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;wget https://packages.erlang-solutions.com/erlang-solutions_1.0_all.deb &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; sudo dpkg -i erlang-solutions_1.0_all.deb
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get install esl-erlang       &lt;span class=&quot;c&quot;&gt;# Install Erlang&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get install elixir           &lt;span class=&quot;c&quot;&gt;# Install Elixir&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;install-hex--rebar&quot;&gt;Install Hex &amp;amp; Rebar&lt;/h2&gt;
&lt;p&gt;Install Hex by using the &lt;code class=&quot;highlighter-rouge&quot;&gt;Mix&lt;/code&gt; build tool that comes with Elixir.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mix local.hex                         &lt;span class=&quot;c&quot;&gt;# Install Hex&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mix local.rebar                       &lt;span class=&quot;c&quot;&gt;# Install Rebar&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;install-fwup&quot;&gt;Install fwup&lt;/h2&gt;
&lt;p&gt;Install fwup by downloading and installing the Debian package listed on the &lt;a href=&quot;https://github.com/fhunleth/fwup#installing&quot;&gt;fwup Github page&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;install-gstat--squashfs-tools&quot;&gt;Install gstat &amp;amp; squashfs-tools&lt;/h2&gt;
&lt;p&gt;The Nerves installation guide is a little vague about where to find these tools. A bit of research revealed that these are the correct packages to install on Ubuntu.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get install ganglia-monitor  &lt;span class=&quot;c&quot;&gt;# Install gstat&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get install squashfs-tools   &lt;span class=&quot;c&quot;&gt;# Install squashfs-tools&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;install-nervesbootstrap&quot;&gt;Install nerves_bootstrap&lt;/h2&gt;
&lt;p&gt;Last we install the nerves_bootstrap archive using &lt;code class=&quot;highlighter-rouge&quot;&gt;Mix&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mix archive.install https://github.com/nerves-project/archives/raw/master/nerves_bootstrap.ez
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;p&gt;Here’s some relevant reading material I found useful:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://theerlangelist.blogspot.com/2012/12/yet-another-introduction-to-erlang.html&quot;&gt;Yet Another Introduction to Erlang&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

    &lt;p&gt;&lt;a href=&quot;/installing-nerves/&quot;&gt;Nerves Blinky&lt;/a&gt; was originally published by Brian Voskerijian at &lt;a href=&quot;&quot;&gt;On Ice&lt;/a&gt; on June 09, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Nerves]]></title>
  <link rel="alternate" type="text/html" href="/getting-started-with-nerves/" />
  <id>/getting-started-with-nerves</id>
  <published>2016-06-07T21:42:54-04:00</published>
  <updated>2016-06-07T21:42:54-04:00</updated>
  <author>
    <name>Brian Voskerijian</name>
    <uri></uri>
    <email>brian@bvosk.xyz</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;a href=&quot;http://nerves-project.org/&quot;&gt;Nerves&lt;/a&gt; is a way to build embedded Linux systems using the &lt;a href=&quot;http://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt; programming language. I’ve decided to try it out and I’ll be chronicling my experience with it here. I’m not sure where we’re going or how&lt;/p&gt;

&lt;h1 id=&quot;why-nerves&quot;&gt;Why Nerves?&lt;/h1&gt;

&lt;p&gt;I’m excited about Nerves because it combines a lot of things I’m interested in: Embedded Linux, Elixir, and &lt;a href=&quot;http://www.erlang.org/&quot;&gt;Erlang&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;embedded-linux&quot;&gt;Embedded Linux&lt;/h2&gt;

&lt;p&gt;I got a Raspberry Pi for Christmas and it’s been gathering dust since then. I’ve worked on a variety of embedded systems, but never touched embedded Linux. Embedded Linux is cool because it’s a happy medium between a bare-metal embedded software and a full blown desktop PC. You get a taste of both worlds!&lt;/p&gt;

&lt;h2 id=&quot;elixir&quot;&gt;Elixir&lt;/h2&gt;

&lt;p&gt;Elixir is a &lt;a href=&quot;https://en.wikipedia.org/wiki/Functional_programming&quot;&gt;functional&lt;/a&gt; programming language, a far cry from the &lt;a href=&quot;https://en.wikipedia.org/wiki/Imperative_programming&quot;&gt;imperative&lt;/a&gt; approach of traditional C. While the handful of functional programming languages are far from mainstream, a variety of functional concepts are leaking into more traditional programming languages (like C++ and JavaScript) and leaving their mark on the ever-evolving doctrine how to create quality software. I have to try out some functional programming.&lt;/p&gt;

&lt;h2 id=&quot;erlang&quot;&gt;Erlang&lt;/h2&gt;

&lt;p&gt;Elixir inherits a lot of concepts from Erlang and runs atop on the same virtual machine (BEAM). Erlang is known for its ability to produce highly concurrent, robust systems. These concepts are of growing importance to the embedded systems world and the software world at large. Erlang accomplishes this by handling concurrency itself instead of delegating those duties to an operating system. Distributed, fault tolerant systems are realized through Erlang’s model for independent processes with isolated memory, asynchronous message passing, and error containment. If it sounds confusing, that’s probably because I don’t understand it.&lt;/p&gt;

&lt;h1 id=&quot;what-are-we-going-to-build-with-nerves&quot;&gt;What are we going to build with Nerves?&lt;/h1&gt;

&lt;p&gt;I haven’t figured that out yet. If you have any ideas, let me know!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/getting-started-with-nerves/&quot;&gt;Nerves&lt;/a&gt; was originally published by Brian Voskerijian at &lt;a href=&quot;&quot;&gt;On Ice&lt;/a&gt; on June 07, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Init]]></title>
  <link rel="alternate" type="text/html" href="/init/" />
  <id>/init</id>
  <published>2016-02-08T21:00:11-05:00</published>
  <updated>2016-02-08T21:00:11-05:00</updated>
  <author>
    <name>Brian Voskerijian</name>
    <uri></uri>
    <email>brian@bvosk.xyz</email>
  </author>
  <content type="html">
    &lt;p&gt;Today I started a blog. Here’s why:&lt;/p&gt;

&lt;h2 id=&quot;all-the-cool-kids-are-doing-it&quot;&gt;All the cool kids are doing it&lt;/h2&gt;
&lt;p&gt;One reason I finally have the nerve to start a blog is that I see so many others doing it successfully. Personal blogs have become an important part of my daily diet and I find myself increasingly reliant on posts from helpful strangers. I’m jumping into the discussion. Maybe with a little luck I can help someone too.&lt;/p&gt;

&lt;h2 id=&quot;youre-my-rubber-duck&quot;&gt;You’re my rubber duck&lt;/h2&gt;
&lt;p&gt;The phrase &lt;a href=&quot;https://en.wikipedia.org/wiki/Rubber_duck_debugging&quot;&gt;rubber duck debugging&lt;/a&gt; is often used in programming. It refers to the practice of troubleshooting your code by explaining it step-by-step. The rubber duck part of it emphasizes that it doesn’t matter if you’re talking to a genius or a rubber duck. What’s important is that you take the time to compile your thoughts and explain whatever it is you’re having trouble with. Nine times out of ten you realize how to solve the problem before you can finish your explanation.&lt;/p&gt;

&lt;p&gt;This blog is a playground for me to experiment. And you are my rubber duck.&lt;/p&gt;

&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;/h2&gt;
&lt;p&gt;Rubber ducks are great, but what if they could talk back? Then we’d have a feedback loop. That’s what allows a robot to do things like this:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/cyN-CRNrb3E&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Feedback can help humans achieve greatness too! And it just so happens that my rubber duck &lt;em&gt;can&lt;/em&gt; talk back. Please do.&lt;/p&gt;

&lt;p&gt;Challenge me. Tell me why I’m wrong. Berate me about that typo that doesn’t just suggest carelessness, but a gross misunderstanding of the English language. And if I ever get something right, chime in and tell me why you agree.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/init/&quot;&gt;Init&lt;/a&gt; was originally published by Brian Voskerijian at &lt;a href=&quot;&quot;&gt;On Ice&lt;/a&gt; on February 08, 2016.&lt;/p&gt;
  </content>
</entry>

</feed>
