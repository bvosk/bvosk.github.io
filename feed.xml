<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
<title type="text">On Ice</title>
<generator uri="https://github.com/jekyll/jekyll">Jekyll</generator>
<link rel="self" type="application/atom+xml" href="/feed.xml" />
<link rel="alternate" type="text/html" href="" />
<updated>2016-08-18T19:45:27-04:00</updated>
<id>/</id>
<author>
  <name>Brian Voskerijian</name>
  <uri>/</uri>
  <email>brian@bvosk.xyz</email>
</author>


<entry>
  <title type="html"><![CDATA[Modern Money]]></title>
  <link rel="alternate" type="text/html" href="/modern-money/" />
  <id>/modern-money</id>
  <published>2016-08-13T23:33:09-04:00</published>
  <updated>2016-08-13T23:33:09-04:00</updated>
  <author>
    <name>Brian Voskerijian</name>
    <uri></uri>
    <email>brian@bvosk.xyz</email>
  </author>
  <content type="html">
    &lt;p&gt;A few months ago I was tasked with giving a 10 minute presentation to some of my
coworkers to develop my presentation skills. It’s a part of the leadership
training offered in the rotational program we’re in. As the focus was
on presentation skills rather than subject matter, the choice of content was
completely up to me.&lt;/p&gt;

&lt;p&gt;When I got to thinking about what I would present, the answer became
increasingly clear. I had been given 10 uninterrupted minutes of attention from
a complete social group of mine, and I wasn’t going to let that go to waste.
This was an opportunity to make an impact! But what’s the impact that I wanted 
to make?&lt;/p&gt;

&lt;h2 id=&quot;solve-a-problem&quot;&gt;Solve a problem&lt;/h2&gt;

&lt;p&gt;Anyone who knows me well will tell you that I love to complain.
It’s not the most desirable trait, but I’ve come to
accept that it’s part of how my brain works. This skeptical tendency isn’t
without its drawbacks, but at its best it’s helpful in identifying
solutions to problems that others don’t see or won’t address. One such problem
has resurfaced over and over again in all my social circles; exchanging cash.&lt;/p&gt;

&lt;p&gt;Part of what makes this problem so particularly annoying is that good solutions
already exist to address it. Apps like Square and Venmo are somewhat
popular, but my social groups have yet to commit to one
solution with any deliberation. This was my chance to do something about
that! So when I thought of what to talk about during my 10 minutes on stage, this
problem quickly became the frontrunner.&lt;/p&gt;

&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;

&lt;p&gt;Below you will find the slides that I presented to my colleagues/friends. 
I am sharing this in the hopes that you find it useful in convincing your social
group to commit to one digital payment system. I know not everyone will have my
unique opportunity to present with a visual aid, but I think the structure of
the proposal was effective. With tongue in cheek, this is my &lt;a href=&quot;http://www.goodreads.com/quotes/705426-each-time-a-man-stands-up-for-an-ideal-or&quot;&gt;“tiny ripple of hope”&lt;/a&gt; 
Here’s how it helps you make your case:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Provides an example of the problem in action using a split restaurant bill&lt;/li&gt;
  &lt;li&gt;Summarizes what a digital payment system is&lt;/li&gt;
  &lt;li&gt;Lists pros and cons&lt;/li&gt;
  &lt;li&gt;Relates the network effect to this problem&lt;/li&gt;
  &lt;li&gt;Lists popular options&lt;/li&gt;
  &lt;li&gt;Urges the group to form a consensus and commit to one digital payment system&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tips-for-success&quot;&gt;Tips for success&lt;/h2&gt;

&lt;p&gt;Here are some tips that I’ve gathered during my ongoing crusade:&lt;/p&gt;

&lt;h3 id=&quot;make-the-case-for-digital-payment-systems-not-one-in-particular&quot;&gt;Make the case for digital payment systems, not one in particular&lt;/h3&gt;

&lt;p&gt;Don’t let the details of which application to use foil the progress of
switching to &lt;em&gt;any&lt;/em&gt; digital payment system. Going from cash to a suboptimal
digital payment system is way better than never making the switch because you
got stonewalled by someone who wasn’t hooked on your particular preference.&lt;/p&gt;

&lt;h3 id=&quot;address-legitimate-concerns-directly&quot;&gt;Address legitimate concerns directly&lt;/h3&gt;

&lt;p&gt;I have found that the most popular reasons for not using a digital payment
system are laziness and a lack of group coordination, but some have legitimate reasons
for being apprehensive. Talk through these concerns, don’t shy away from them.&lt;/p&gt;

&lt;h3 id=&quot;dont-take-credit&quot;&gt;Don’t take credit&lt;/h3&gt;

&lt;p&gt;As some of your friends take the plunge into digital payment systems, you may
feel an urge to celebrate your success. You can party in your thoughts, but
don’t do it publicly. Celebrate the group’s new enlightened users and make sure
they’re enjoying this newfound convenience.&lt;/p&gt;

&lt;h3 id=&quot;be-persistent&quot;&gt;Be persistent&lt;/h3&gt;

&lt;p&gt;It’s difficult to find a balance between persistence and annoyance, but this
won’t happen in a day. Keep up the good work!&lt;/p&gt;

&lt;p&gt;Good luck. With a little hope, we can sweep down the mightiest walls of cash and
enjoy the bright future of digital payments sooner rather than later!&lt;/p&gt;

&lt;iframe src=&quot;https://docs.google.com/presentation/d/1ClpIdoPhFTcaiVKb15fgy0WDGzJnJyqNYGaiuVB9pPI/embed?start=false&amp;amp;loop=false&amp;amp;delayms=3000&quot; frameborder=&quot;0&quot; width=&quot;480&quot; height=&quot;389&quot; allowfullscreen=&quot;true&quot; mozallowfullscreen=&quot;true&quot; webkitallowfullscreen=&quot;true&quot;&gt;&lt;/iframe&gt;

    &lt;p&gt;&lt;a href=&quot;/modern-money/&quot;&gt;Modern Money&lt;/a&gt; was originally published by Brian Voskerijian at &lt;a href=&quot;&quot;&gt;On Ice&lt;/a&gt; on August 13, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Installing Phoenix]]></title>
  <link rel="alternate" type="text/html" href="/installing-phoenix/" />
  <id>/installing-phoenix</id>
  <published>2016-07-24T17:08:06-04:00</published>
  <updated>2016-07-24T17:08:06-04:00</updated>
  <author>
    <name>Brian Voskerijian</name>
    <uri></uri>
    <email>brian@bvosk.xyz</email>
  </author>
  <content type="html">
    &lt;p&gt;I’m documenting my experience installing Phoenix on Ubuntu 14.04 in the hopes
that I can help others avoid some problems I ran into. I’ll be brief
when the &lt;a href=&quot;http://www.phoenixframework.org/docs/installation&quot;&gt;official documentation&lt;/a&gt;
serves me well. When the documentation leaves me confused, I’ll explain what I
did to resolve the issues.&lt;/p&gt;

&lt;h2 id=&quot;install-dependencies&quot;&gt;Install dependencies&lt;/h2&gt;

&lt;h4 id=&quot;install-elixir--erlang&quot;&gt;Install Elixir &amp;amp; Erlang&lt;/h4&gt;

&lt;p&gt;Follow the &lt;a href=&quot;http://elixir-lang.org/install.html&quot;&gt;Elixir installation guide&lt;/a&gt;&lt;/p&gt;

&lt;h4 id=&quot;install-hex&quot;&gt;Install Hex&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mix local.hex
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;install-nodejs&quot;&gt;Install Node.js&lt;/h4&gt;

&lt;p&gt;Follow the &lt;a href=&quot;https://nodejs.org/en/download/&quot;&gt;Node.js download page&lt;/a&gt;. &lt;strong&gt;Note that
you need to install Node.js &amp;gt;= 5.0.0&lt;/strong&gt;. This is specified in the
Phoenix installation guide, but I missed it in my first pass. I initially
installed Node.js using &lt;code class=&quot;highlighter-rouge&quot;&gt;apt-get&lt;/code&gt;, but that provides version that’s incompatible
with Phoenix.&lt;/p&gt;

&lt;p&gt;On Ubuntu, follow &lt;a href=&quot;https://Nodejs.org/en/download/package-manager/#debian-and-ubuntu-based-linux-distributions&quot;&gt;these instructions&lt;/a&gt; for Node.js v6:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;curl -sL https://deb.nodesource.com/setup_6.x | sudo -E bash -
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get install -y nodejs
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;install-postgresql&quot;&gt;Install PostgreSQL&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get install postgresql
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;install-inotify-tools&quot;&gt;Install inotify-tools&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo apt-get install inotify-tools
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;install-phoenix&quot;&gt;Install Phoenix&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mix archive.install https://github.com/phoenixframework/archives/raw/master/phoenix_new.ez
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;create-a-project&quot;&gt;Create a project&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mix phoenix.new hello
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;hello
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;create-an-ecto-repo&quot;&gt;Create an Ecto repo&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mix ecto.create
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Since I’m new to PostreSQL - and to databases in general - this step gave me some 
trouble. I was greeted with this error:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;** (Mix) The database for Hello.Repo couldn&#39;t be created: FATAL
(invalid_password): password authentication failed for user &quot;postgres&quot;
16:35:22.980 [error] GenServer #PID&amp;lt;0.147.0&amp;gt; terminating
** (Postgrex.Error) FATAL (invalid_password): password authentication failed for
user &quot;postgres&quot;
    (db_connection) lib/db_connection/connection.ex:148:
DBConnection.Connection.connect/2
    (connection) lib/connection.ex:623: Connection.enter_connect/5
    (stdlib) proc_lib.erl:240: :proc_lib.init_p_do_apply/3
Last message: nil
State: Postgrex.Protocol
You may also need to alter your postgreSQL configuration to ensure it works
with Ecto. I had to alter the postgres user. You can do this using the `psql` 
terminal:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you get something similar, you may have to alter the postgres user password
in your postgreSQL configuration&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;. Do this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Start the psql terminal&lt;/span&gt;
&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;sudo -u postgres psql

psql &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;9.3.13&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Type &lt;span class=&quot;s2&quot;&gt;&quot;help&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;help.

&lt;span class=&quot;gp&quot;&gt;postgres=# &lt;/span&gt;ALTER USER postgres PASSWORD &lt;span class=&quot;s1&quot;&gt;&#39;postgres&#39;&lt;/span&gt;;
&lt;span class=&quot;gp&quot;&gt;postgres=# &lt;/span&gt;ALTER USER postgres WITH SUPERUSER;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;start-the-phoenix-application&quot;&gt;Start the Phoenix application&lt;/h2&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gp&quot;&gt;$ &lt;/span&gt;mix phoenix.server
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If everything went well, you should see the default Phoenix landing page when
you point your browser to &lt;code class=&quot;highlighter-rouge&quot;&gt;localhost:4000&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../images/phoenix-landing-page.png&quot; height=&quot;250&quot; width=&quot;350&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;More info here: &lt;a href=&quot;http://www.phoenixframework.org/docs/ecto-models&quot;&gt;http://www.phoenixframework.org/docs/ecto-models&lt;/a&gt; &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/installing-phoenix/&quot;&gt;Installing Phoenix&lt;/a&gt; was originally published by Brian Voskerijian at &lt;a href=&quot;&quot;&gt;On Ice&lt;/a&gt; on July 24, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[From C to Elixir]]></title>
  <link rel="alternate" type="text/html" href="/from-c-to-elixir/" />
  <id>/from-c-to-elixir</id>
  <published>2016-07-23T00:00:00-04:00</published>
  <updated>2016-07-23T00:00:00-04:00</updated>
  <author>
    <name>Brian Voskerijian</name>
    <uri></uri>
    <email>brian@bvosk.xyz</email>
  </author>
  <content type="html">
    &lt;p&gt;Since my last post I’ve been playing around with &lt;a href=&quot;http://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt;. 
If you’re interested in learning about it, I recommend starting with the 
&lt;a href=&quot;http://elixir-lang.org/getting-started/introduction.html&quot;&gt;official getting started guide&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Before we dive into some things I found interesting about Elixir, let’s
discuss the most notable differences between Elixir and C:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;Elixir is new&lt;/p&gt;

    &lt;p&gt;Elixir 1.0 was released in 2014. C was doing some heavy lifting as early as
1972&lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;.
As one would expect, the decades following the birth of C have afforded Elixir 
with the new ideas, successes, and failures of countless programming languages.
While this is important to keep in mind, it’s difficult to isolate this
difference from the rest. I mention this mainly to give a tip of the hat to C
before I say some not-so-nice things about it.&lt;/p&gt;

  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Elixir is functional&lt;/p&gt;

    &lt;p&gt;Functional programming makes the developer think differently about how to
accomplish the task at hand. I want to focus on this because I think it’s the
most interesting divergence from C, which takes an imperative approach.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Elixir is dynamically typed&lt;/p&gt;

    &lt;p&gt;Dynamically typed languages are probably familiar to most at this point,
popularized by the rise of scripting languages like Python, JavaScript, and
Ruby. A C programmer will find this liberating, but at times dangerously
so.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;immutable-data&quot;&gt;Immutable data&lt;/h2&gt;

&lt;p&gt;All data is immutable in Elixir. In other words, a variable’s value cannot
change once it is assigned. Check it out:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;brian&quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;brian&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;upcase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;BRIAN&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;brian&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This is puzzling if you’re used to C. Didn’t we make &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; uppercase? No, we
didn’t. We performed a transformation on &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; which resulted in a new string.
The new string is a clone of &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;, except uppercase. It’s a subtle, but
important difference.&lt;/p&gt;

&lt;p&gt;When all the data is immutable, you never have to worry if a function will 
manipulate a variable you pass to it. This has the neat effect of making the 
code easier to conceptualize.&lt;/p&gt;

&lt;p&gt;To demonstrate this point, take a look at this C code:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;brian&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;some_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello, %s!&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What’s the value of &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt; after we call &lt;code class=&quot;highlighter-rouge&quot;&gt;some_function&lt;/code&gt; on it? The only correct 
answer here is, “Who knows?” The developer is forced to go lookup the details of 
&lt;code class=&quot;highlighter-rouge&quot;&gt;some_function&lt;/code&gt; to find out if it manipulates &lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;data-transformations&quot;&gt;Data transformations&lt;/h2&gt;

&lt;p&gt;Functional programming offers a different perspective about what a program
ought to do. Let’s take a look at take a look at three programming paradigms and
try to boil their philosophies down to a single sentence:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Imperative&lt;/strong&gt;: &lt;em&gt;Programs execute commands&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Object-Oriented&lt;/strong&gt;: &lt;em&gt;Programs manipulate objects&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Functional&lt;/strong&gt;: &lt;em&gt;Programs transform data&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So Elixir - taking a functional approach - touts data transformation, but all
data is immutable. After the first example, you may be thinking that creating 
copies of data can get syntactically cumbersome. One can imagine countless lines 
of code that look like this:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;function3(function2(function3(data)))
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And indeed this is valid Elixir:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;one two three&quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;one two three&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;one+two+three&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But there’s a better way. To support the precepts of functional programming 
while maintaining readability, Elixir provides special syntax to perform data 
transformations. Here’s the same code using Elixir’s pipe operator, &lt;code class=&quot;highlighter-rouge&quot;&gt;|&amp;gt;&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;one two three&quot;&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;one two three&quot;&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;iex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;+&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;sd&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;one+two+three&quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;That’s better! The pipe operator simply passes the return value of the
left function as the first argument to right function. In this way, functions
can be chained together endlessly and read naturally from left to right in the
order that they’re applied.&lt;/p&gt;

&lt;h2 id=&quot;higher-order-functions&quot;&gt;Higher Order Functions&lt;/h2&gt;

&lt;p&gt;In Elixir, functions are passed all over the place. It can be a confusing
at first, but the benefits are clear once you get familiar with the pattern.
It allows you to do more with less, and makes your code more readable. Let’s 
explore a simple example.&lt;/p&gt;

&lt;p&gt;Say you want to take a list of numbers and return a list of those numbers
multiplied by two. Here’s what that might look like in C:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;times_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;uint16_t&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

 &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It’s a lot of work for such a common pattern. Namely iterate over a
bunch of items and do something to each one. In a real life you’re probably 
doing something more meaningful than multiplying them by two, but the general 
case is the same. Here’s what that would look like in Elixir:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times_two&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;numbers&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;|&amp;gt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Enum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;number&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This may be unfamiliar, so let’s break it down. We pipe the argument
&lt;code class=&quot;highlighter-rouge&quot;&gt;numbers&lt;/code&gt; into an Elixir function called &lt;code class=&quot;highlighter-rouge&quot;&gt;Enum.map&lt;/code&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;Enum.map&lt;/code&gt; is a powerful,
but simple function that applies a function (passed as an argument) to every 
item in a container. Then we define a function which takes an argument called 
&lt;code class=&quot;highlighter-rouge&quot;&gt;number&lt;/code&gt; and returns &lt;code class=&quot;highlighter-rouge&quot;&gt;number * 2&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This pattern and others like it are commonplace in Elixir. There are similar
functions defined in the &lt;code class=&quot;highlighter-rouge&quot;&gt;Enum&lt;/code&gt; module like &lt;code class=&quot;highlighter-rouge&quot;&gt;filter&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;all?&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;reduce&lt;/code&gt;
which make common design patterns very easy to implement. They allow you to
define the unique aspect of your code, but handle the repetitive parts for you.
When another developer reads your code, it’s far easier to understand what’s
going on because they’re immediately familiar with the pattern being employed.&lt;/p&gt;

&lt;h2 id=&quot;other-differences&quot;&gt;Other differences&lt;/h2&gt;

&lt;p&gt;There are plenty of other differences that I won’t get into. Elixir is
garbage collected, places a heavy emphasis on lists and recursion, and runs atop 
a virtual machine. These are significant, but the focus on data transformation
rather than procedural execution is the most profound change.&lt;/p&gt;

&lt;p&gt;I’m having a ball with Elixir!&lt;/p&gt;
&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;There’s a little more to this. &lt;a href=&quot;https://en.wikipedia.org/wiki/C_(programming_language)#History&quot;&gt;According to Wikipedia&lt;/a&gt;, C was being used to develop Unix in 1972 and the famous K&amp;amp;R book was published in 1978. It wasn’t until 1989 that C was formally standardized as ANSI C, but it would be disingenuous to suggest that its use wasn’t already widespread at that time. &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;

    &lt;p&gt;&lt;a href=&quot;/from-c-to-elixir/&quot;&gt;From C to Elixir&lt;/a&gt; was originally published by Brian Voskerijian at &lt;a href=&quot;&quot;&gt;On Ice&lt;/a&gt; on July 23, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Nerves]]></title>
  <link rel="alternate" type="text/html" href="/nerves/" />
  <id>/nerves</id>
  <published>2016-06-07T21:42:54-04:00</published>
  <updated>2016-06-07T21:42:54-04:00</updated>
  <author>
    <name>Brian Voskerijian</name>
    <uri></uri>
    <email>brian@bvosk.xyz</email>
  </author>
  <content type="html">
    &lt;p&gt;&lt;img src=&quot;../images/nerves-logo.png&quot; height=&quot;150&quot; width=&quot;150&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://nerves-project.org/&quot;&gt;Nerves&lt;/a&gt; is a way to build embedded Linux systems using the &lt;a href=&quot;http://elixir-lang.org/&quot;&gt;Elixir&lt;/a&gt; programming language. It combines a bunch of things I’m interested in: Embedded Linux, Elixir, and &lt;a href=&quot;http://www.erlang.org/&quot;&gt;Erlang&lt;/a&gt;!&lt;/p&gt;

&lt;h2 id=&quot;embedded-linux&quot;&gt;Embedded Linux&lt;/h2&gt;

&lt;p&gt;I’ve worked on a variety of embedded systems, but haven’t touched embedded Linux. Embedded Linux is cool because it’s a middle ground between bare-metal embedded software and full blown application software. I got a Raspberry Pi for Christmas and it’s been gathering dust since then. That will be our target.&lt;/p&gt;

&lt;h2 id=&quot;elixir&quot;&gt;Elixir&lt;/h2&gt;

&lt;p&gt;Elixir is a functional programming language.  It’s a far cry from C’s imperative approach. This sharp contrast is an opportunity to gain perspective. While the growing number of functional programming languages are far from mainstream, a variety of functional concepts have been adopted by more commonly used programming languages (like C++ and JavaScript).&lt;/p&gt;

&lt;h2 id=&quot;erlang&quot;&gt;Erlang&lt;/h2&gt;

&lt;p&gt;Elixir inherits a lot of concepts from Erlang and runs atop the same virtual machine (BEAM). Erlang is known for its ability to produce highly concurrent, robust systems. These concepts are of growing importance to the embedded systems world, and the software world at large. Erlang accomplishes this by handling concurrency itself instead of delegating those duties to an operating system. Distributed, fault tolerant systems are realized through Erlang’s model for independent processes with isolated memory, asynchronous message passing, and error containment. If it sounds confusing, that’s probably because I don’t understand it all that well…yet.&lt;/p&gt;

&lt;h1 id=&quot;what-are-we-going-to-build-with-nerves&quot;&gt;What are we going to build with Nerves?&lt;/h1&gt;

&lt;p&gt;I haven’t figured that out yet. Let me know if you have any ideas!&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/nerves/&quot;&gt;Nerves&lt;/a&gt; was originally published by Brian Voskerijian at &lt;a href=&quot;&quot;&gt;On Ice&lt;/a&gt; on June 07, 2016.&lt;/p&gt;
  </content>
</entry>


<entry>
  <title type="html"><![CDATA[Init]]></title>
  <link rel="alternate" type="text/html" href="/init/" />
  <id>/init</id>
  <published>2016-02-08T21:00:11-05:00</published>
  <updated>2016-02-08T21:00:11-05:00</updated>
  <author>
    <name>Brian Voskerijian</name>
    <uri></uri>
    <email>brian@bvosk.xyz</email>
  </author>
  <content type="html">
    &lt;p&gt;Today I started a blog. Here’s why:&lt;/p&gt;

&lt;h2 id=&quot;all-the-cool-kids-are-doing-it&quot;&gt;All the cool kids are doing it&lt;/h2&gt;
&lt;p&gt;One reason I finally have the nerve to start a blog is that I see so many others doing it successfully. Personal blogs have become an important part of my daily diet and I find myself increasingly reliant on posts from helpful strangers. I’m jumping into the discussion. Maybe with a little luck I can help someone too.&lt;/p&gt;

&lt;h2 id=&quot;youre-my-rubber-duck&quot;&gt;You’re my rubber duck&lt;/h2&gt;
&lt;p&gt;The phrase &lt;a href=&quot;https://en.wikipedia.org/wiki/Rubber_duck_debugging&quot;&gt;rubber duck debugging&lt;/a&gt; is often used in programming. It refers to the practice of troubleshooting your code by explaining it step-by-step. The rubber duck part of it emphasizes that it doesn’t matter if you’re talking to a genius or a rubber duck. What’s important is that you take the time to compile your thoughts and explain whatever it is you’re having trouble with. Nine times out of ten you realize how to solve the problem before you can finish your explanation.&lt;/p&gt;

&lt;p&gt;This blog is a playground for me to experiment. And you are my rubber duck.&lt;/p&gt;

&lt;h2 id=&quot;feedback&quot;&gt;Feedback&lt;/h2&gt;
&lt;p&gt;Rubber ducks are great, but what if they could talk back? Then we’d have a feedback loop. That’s what allows a robot to do things like this:&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/cyN-CRNrb3E&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Feedback can help humans achieve greatness too! And it just so happens that my rubber duck &lt;em&gt;can&lt;/em&gt; talk back. Please do.&lt;/p&gt;

&lt;p&gt;Challenge me. Tell me why I’m wrong. Berate me about that typo that doesn’t just suggest carelessness, but a gross misunderstanding of the English language. And if I ever get something right, chime in and tell me why you agree.&lt;/p&gt;

    &lt;p&gt;&lt;a href=&quot;/init/&quot;&gt;Init&lt;/a&gt; was originally published by Brian Voskerijian at &lt;a href=&quot;&quot;&gt;On Ice&lt;/a&gt; on February 08, 2016.&lt;/p&gt;
  </content>
</entry>

</feed>
